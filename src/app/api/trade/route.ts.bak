import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'




export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)

    if (!session?.user?.id) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const { symbol, type, shares, price } = await request.json()

    if (!symbol || !type || !shares || !price) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      )
    }

    const total = shares * price

    // Get user's portfolio
      where: { userId: session.user.id },
      include: { holdings: true }
    })

    if (!portfolio) {
      return NextResponse.json(
        { error: 'Portfolio not found' },
        { status: 404 }
      )
    }

    if (type === 'BUY') {
      // Check if user has enough balance
      if (portfolio.currentBalance < total) {
        return NextResponse.json(
          { error: 'Insufficient funds' },
          { status: 400 }
        )
      }

      // Find existing holding or create new one
      const existingHolding = portfolio.holdings.find(h => h.symbol === symbol)

      if (existingHolding) {
        // Update existing holding (calculate new average price)
        const totalShares = existingHolding.shares + shares
        const totalCost = (existingHolding.shares * existingHolding.avgPrice) + total
        const newAvgPrice = totalCost / totalShares

          where: { id: existingHolding.id },
          data: {
            shares: totalShares,
            avgPrice: newAvgPrice,
            currentPrice: price,
          }
        })
      } else {
        // Create new holding
          data: {
            portfolioId: portfolio.id,
            symbol,
            shares,
            avgPrice: price,
            currentPrice: price,
          }
        })
      }

      // Update portfolio balance
        where: { id: portfolio.id },
        data: {
          currentBalance: portfolio.currentBalance - total
        }
      })

    } else if (type === 'SELL') {
      // Find existing holding
      const existingHolding = portfolio.holdings.find(h => h.symbol === symbol)

      if (!existingHolding || existingHolding.shares < shares) {
        return NextResponse.json(
          { error: 'Insufficient shares to sell' },
          { status: 400 }
        )
      }

      if (existingHolding.shares === shares) {
        // Remove holding completely
          where: { id: existingHolding.id }
        })
      } else {
        // Update holding
          where: { id: existingHolding.id },
          data: {
            shares: existingHolding.shares - shares,
            currentPrice: price,
          }
        })
      }

      // Update portfolio balance
        where: { id: portfolio.id },
        data: {
          currentBalance: portfolio.currentBalance + total
        }
      })
    }

    // Record the trade
      data: {
        userId: session.user.id,
        symbol,
        type: type as 'BUY' | 'SELL',
        shares,
        price,
        total,
      }
    })

    return NextResponse.json({
      message: `Successfully ${type.toLowerCase()}ed ${shares} shares of ${symbol}`,
      trade: {
        symbol,
        type,
        shares,
        price,
        total,
      }
    })

  } catch (error) {
    console.error('Trade API error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}